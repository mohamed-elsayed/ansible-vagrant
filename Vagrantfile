# -*- mode: ruby -*-f
# vi: set ft=ruby :
PROJECT = 'kaust-preperation'

VAGRANT_API_VERSION = "2"
HOSTIP = "192.168.1.3"
GUESTIP = "192.168.1.15"
Vagrant.require_version ">= 1.8.0"
Vagrant.configure(VAGRANT_API_VERSION) do |config|
  
  config.vm.define "web" do |web|
   web.vm.box = "centos7"
   web.vm.hostname = "centos-brightskies"
   #port forwarding for the http port create nat interface
   
   #web.vm.network "forwarded_port", guest: 22, host: 2201, auto_correct: true
   web.vm.network "public_network" , ip: "192.168.1.15", bridge: "wlp2s0"
   web.vm.network "forwarded_port", guest: 80, host: 8080 
   #web.vm.network "forwarded_port", guest: 80, host: 8080 ,host_ip: HOSTIP,guest_ip:GUESTIP #make port forwarding on this ip only ,by default all interfaces
   #test via curl -I localhost:8080 and curl -I 192.168.1.4:8080 from host
   #web.vm.network "public_network" , bridge: "enp3s0"
   #web.vm.network "private_network" ,ip: "10.0.2.15",virtualbox__intnet: "mynetwork"
   #web.vm.network "private_network" ,type: "dhcp"
   #web.vm.network "private_network" , ip: "100.100.100.115"
   #web.vm.provision "shell", path: "/home/kandil/vagrant-task/script" ,privileged: true, run: "always"
   web.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    vb.gui = true
    vb.cpus = "1"
    # Customize the amount of memory on the VM:
    vb.memory = "1024"
    vb.name = "webserver"
   end    
  end

  config.vm.define "db" do |db|
   db.vm.box = "ubuntu16.1"
   db.vm.hostname = "ubuntu-brightskies"
   db.vm.network "forwarded_port", guest: 80, host: 8082 
   #db.vm.network "forwarded_port", guest: 22, host: 2200, id: "ssh", auto_correct: false
   db.vm.network "public_network" , ip: "192.168.1.16", bridge: "wlp2s0"
   #db.vm.network "public_network" , bridge: "enp3s0"
   #db.vm.network "private_network" ,ip: "10.0.2.16",virtualbox__intnet: "mynetwork"
   #db.vm.network "private_network" ,ip: "10.0.2.16"
   #db.vm.provision "shell", path: "/home/kandil/vagrant-task/script2" ,privileged: true, run: "always"
   db.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    vb.gui = true
    vb.cpus = "1"
    # Customize the amount of memory on the VM:
    vb.memory = "1024"
    vb.name = "database"
   end  
  end
  
  #
    # config.vm.provider "virtualbox" do |vb|
    #   # Display the VirtualBox GUI when booting the machine
    #   vb.gui = true
    #   vb.cpus = "1"
    #   # Customize the amount of memory on the VM:
    #   vb.memory = "1024"
    #  end
  #ssh- configuration
  #vagrant genrate a random key and insert to box
  #we modify setting to not insert random generated key in the box "false"

  config.ssh.insert_key = true

  #our keys are beneath keys dir
  #we can set the configuration to use more than one private key with list
  #vagrant tries to use keys in sequence
  #by default the key the box has are in ~/.vagrant.d/insecure_private_key
  #while provisioning vagrant generate another random key instead of this insecure one

  #config.ssh.private_key_path = ["~/.vagrant.d/insecure_private_key","keys/private"]

  #copy public key to VM

  #config.vm.provision "file", source: "keys/private.pub", destination: "~/.ssh/authorized_keys" 
  #this will override key in authorized key and ansible can not provision as main ssh connection opened by vagrant user 
  #to overcome this we can use the following

  # Add custom key from the actually logined user to the generated machine
  config.vm.provision :file, :source => "#{ENV['HOME']}/.ssh/id_rsa.pub", :destination => "/tmp/vagrantfile-pubkey"
  config.vm.provision :shell, :privileged => false, :inline => <<-SHELL
      cat /tmp/vagrantfile-pubkey >> $HOME/.ssh/authorized_keys
      SHELL

  #prevent access with plaintext password

  config.vm.provision "shell", privileged: true, inline: <<-EOC
    sudo sed -i -e "s#PasswordAuthentication yes#PasswordAuthentication no#g" /etc/ssh/sshd_config
    sudo systemctl restart sshd
  EOC
  config.vm.provision "ansible" do |ansible|
    ansible.playbook = "ansible/install.yml"
    #ansible.limit = "all" when you need to provision to all machine 
    #ansible.inventory_path = "ansible/myinventory.yml"
    #we can use the default inventory generated by vagrant and specify
    #the hosts with the following syntax
    #project-path/.vagrant/provisioners/ansible/inventory
    # group-name =====> hostname
    ansible.groups = {
      "webservers" => ["web"], 
      "databases"  => ["db"] 
    }
    ansible.verbose = "v"
    ansible.become = true
    ansible.become_user = "root"
    ansible.compatibility_mode = "2.0"
  end

  
end
#********************************************************************************
#in general vagrant has directory structure as follow
# .vagrant
# ├── machines
# │   ├── db        #name of the machine      
# │   │   └── virtualbox       # name of the provider
# │   │       ├── action_provision
# │   │       ├── action_set_name
# │   │       ├── creator_uid
# │   │       ├── id
# │   │       ├── index_uuid
# │   │       ├── private_key       # key used to ssh with
# │   │       ├── synced_folders
# │   │       └── vagrant_cwd
# │   └── web
# │       └── virtualbox
# │           ├── action_provision
# │           ├── action_set_name
# │           ├── creator_uid
# │           ├── id
# │           ├── index_uuid
# │           ├── private_key
# │           ├── synced_folders
# │           └── vagrant_cwd
# └── provisioners
#     └── ansible
#         └── inventory
#             └── vagrant_ansible_inventory


#our whole project architecture
# vagrant-project
# ├── ansible
# │   ├── install.yml
# │   ├── myinventory.yml
# │   └── roles
# │       └── apache
# │           ├── handlers
# │           │   └── main.yml
# │           ├── tasks
# │           │   ├── debian.yml
# │           │   ├── main.yml
# │           │   └── redhat.yml
# │           ├── templates
# │           │   └── site.conf
# │           └── vars
# │               └── main.yml
# ├── keys
# │   ├── private
# │   └── private.pub
# ├── script
# ├── script2
# ├── ubuntu-xenial-16.04-cloudimg-console.log
# ├── .vagrant
# │   ├── machines
# │   │   ├── db
# │   │   │   └── virtualbox
# │   │   │       ├── action_provision
# │   │   │       ├── action_set_name
# │   │   │       ├── creator_uid
# │   │   │       ├── id
# │   │   │       ├── index_uuid
# │   │   │       ├── private_key
# │   │   │       ├── synced_folders
# │   │   │       └── vagrant_cwd
# │   │   └── web
# │   │       └── virtualbox
# │   │           ├── action_provision
# │   │           ├── action_set_name
# │   │           ├── creator_uid
# │   │           ├── id
# │   │           ├── index_uuid
# │   │           ├── private_key
# │   │           ├── synced_folders
# │   │           └── vagrant_cwd
# │   └── provisioners
# │       └── ansible
# │           └── inventory
# │               └── vagrant_ansible_inventory
# └── Vagrantfile


#and in the current login user using vagrant
# .
# ├── boxes
# │   ├── ansible-VAGRANTSLASH-tower
# │   │   ├── 3.2.2
# │   │   │   └── virtualbox
# │   │   │       ├── ansible-tower-3.2.2-disk001.vmdk
# │   │   │       ├── box.ovf
# │   │   │       ├── metadata.json
# │   │   │       └── Vagrantfile
# │   │   └── metadata_url
# │   ├── centos7
# │   │   └── 0
# │   │       └── virtualbox
# │   │           ├── box.ovf
# │   │           ├── centos-7-1-1.x86_64.vmdk
# │   │           ├── metadata.json
# │   │           └── Vagrantfile
# │   └── ubuntu16
# │       └── 0
# │           └── virtualbox
# │               ├── box.ovf
# │               ├── metadata.json
# │               ├── ubuntu-xenial-16.04-cloudimg-configdrive.vmdk
# │               ├── ubuntu-xenial-16.04-cloudimg.mf
# │               ├── ubuntu-xenial-16.04-cloudimg.vmdk
# │               └── Vagrantfile
# ├── data
# │   ├── checkpoint_cache
# │   ├── checkpoint_signature
# │   ├── fp-leases
# │   ├── lock.dotlock.lock
# │   ├── lock.machine-action-20080f482dc3e5839aeea8304f09c425.lock
# │   ├── lock.machine-action-23d6f4c674eaf5dfb8fa50e2972983a4.lock
# │   ├── lock.machine-action-4a6a2fd808b59f0d183cec506a64d86d.lock
# │   ├── lock.machine-action-a4c8e9e360904618bc4f00984c923a50.lock
# │   └── machine-index
# │       ├── index
# │       └── index.lock
# ├── gems
# │   └── 2.4.2
# ├── insecure_private_key
# ├── rgloader
# │   └── loader.rb
# ├── setup_version
# └── tmp



# so as a best practice we need to create a vagrant user and virtual env to use ansible within it